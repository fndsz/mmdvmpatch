diff --git a/dapnet-gateway/patches/002-conf-type.path b/dapnet-gateway/patches/002-conf-type.path
new file mode 100644
index 0000000..4cabf1b
--- /dev/null
+++ b/dapnet-gateway/patches/002-conf-type.path
@@ -0,0 +1,18 @@
+diff --git a/Conf.cpp b/Conf.cpp
+--- a/Conf.cpp
++++ b/Conf.cpp
+@@ -189,12 +189,12 @@ std::string CConf::getCallsign() const
+ 	return m_callsign;
+ }
+ 
+-std::vector<uint32_t> CConf::getWhiteList() const
++std::vector<unsigned int> CConf::getWhiteList() const
+ {
+ 	return m_whiteList;
+ }
+ 
+-std::vector<uint32_t> CConf::getBlackList() const
++std::vector<unsigned int> CConf::getBlackList() const
+ {
+ 	return m_blackList;
+ }
diff --git a/libmmdvm/Makefile b/libmmdvm/Makefile
index 0d4f2b7..829cee3 100755
--- a/libmmdvm/Makefile
+++ b/libmmdvm/Makefile
@@ -27,7 +27,7 @@ define Package/${PKG_NAME}/description
 Lua-C library for MMDVM
 endef
 
-TARGET_CXXFLAGS = -O3 -Wall -std=c++0x -DOPENWRT=1
+TARGET_CXXFLAGS = -O3 -Wall -std=c++11 -DOPENWRT=1
 TARGET_LDFLAGS = -llua -lm -shared -L$(STAGING_DIR)/usr/lib
 
 ifeq ($(ARCH),mips)
@@ -50,4 +50,4 @@ define Package/${PKG_NAME}/install
 	$(INSTALL_BIN) $(PKG_BUILD_DIR)/mmdvm.so $(1)/usr/lib/lua/
 endef
 
-$(eval $(call BuildPackage,${PKG_NAME}))
\ No newline at end of file
+$(eval $(call BuildPackage,${PKG_NAME}))
diff --git a/libmmdvm/src/DMRId.cpp b/libmmdvm/src/DMRId.cpp
index 0939153..e1b84b9 100644
--- a/libmmdvm/src/DMRId.cpp
+++ b/libmmdvm/src/DMRId.cpp
@@ -19,14 +19,14 @@ using namespace std;
 
 static CDMRLookup* m_lookup = NULL;
 
-string findByCallsign(string callsign) {
+string findCallsignByUID(string uid) {
     assert(m_lookup != NULL);
-    return m_lookup->find(callsign).c_str();
+    return m_lookup->findCallsign(uid);
 }
 
-user_t findUserByCallsign(string callsign) {
+user_t findUserByUID(string uid) {
     assert(m_lookup != NULL);
-    return m_lookup->findUser(callsign);
+    return m_lookup->findUser(uid);
 }
 
 void load(string dmrid_file) {
@@ -36,6 +36,12 @@ void load(string dmrid_file) {
     }
 }
 
+void app(string dmrid_file) {
+    if(m_lookup != NULL) {
+        m_lookup->append(dmrid_file);
+    }
+}
+
 // int main() {
 //     load("/Users/mic/Work/radioid/export/DMRIds.dat");
 //     string callsign = "BD7MQB";
@@ -57,23 +63,27 @@ static int init (lua_State *L) {
     const char *dmrid_file;
     dmrid_file = luaL_checkstring(L, 1);
     load(string(dmrid_file));
+    const char *dmrid_file1;
+    dmrid_file1 = luaL_checkstring(L, 2);
+    app(string(dmrid_file1));
 
     return 0;
 }
 
-static int get_dmrid_by_callsign (lua_State *L) {
-    const char *callsign;
-    callsign = luaL_checkstring(L, 1);
-    lua_pushstring(L, findByCallsign(string(callsign)).c_str());
+static int get_callsign_by_uid (lua_State *L) {
+    const char *uid;
+    uid = luaL_checkstring(L, 1);
+    string cs = findCallsignByUID(string(uid));
+    lua_pushstring(L, cs.c_str());
 
     return 1;
 }
 
-static int get_user_by_callsign (lua_State *L) {
-    const char *callsign;
-    callsign = luaL_checkstring(L, 1);
+static int get_user_by_uid (lua_State *L) {
+    const char *uid;
+    uid = luaL_checkstring(L, 1);
 
-    user_t user = findUserByCallsign(string(callsign));
+    user_t user = findUserByUID(string(uid));
 
     if (!user.exist()) {
         return 0;
@@ -81,10 +91,10 @@ static int get_user_by_callsign (lua_State *L) {
     
     lua_createtable(L, 0, 3);
 
+    lua_pushstring(L, user.callsign.c_str());
+    lua_setfield(L, -2, "callsign");
     lua_pushstring(L, user.name.c_str());
     lua_setfield(L, -2, "name");
-    // lua_pushstring(L, user.city.c_str());
-    // lua_setfield(L, -2, "city");
     lua_pushstring(L, user.country.c_str());
     lua_setfield(L, -2, "country");
 
@@ -93,8 +103,8 @@ static int get_user_by_callsign (lua_State *L) {
 
 //library to be registered
 static const struct luaL_Reg mylib [] = {
-        {"get_dmrid_by_callsign", get_dmrid_by_callsign},
-        {"get_user_by_callsign", get_user_by_callsign},
+        {"get_callsign_by_uid", get_callsign_by_uid},
+        {"get_user_by_uid", get_user_by_uid},
         {"init", init},
         {NULL, NULL}  /* sentinel */
 };
diff --git a/libmmdvm/src/DMRId.hpp b/libmmdvm/src/DMRId.hpp
index 21800ef..8df3b7c 100644
--- a/libmmdvm/src/DMRId.hpp
+++ b/libmmdvm/src/DMRId.hpp
@@ -10,13 +10,12 @@
 using namespace std;
 
 struct user_t {
-	// int id;
+    string callsign;
     string name;
-	// string city;
     string country;
     bool exist() {
-        return name != "";
+        return callsign != "";
     }
 };
 
-#endif
\ No newline at end of file
+#endif
diff --git a/libmmdvm/src/DMRLookup.cpp b/libmmdvm/src/DMRLookup.cpp
index 0969a60..c4da5c6 100644
--- a/libmmdvm/src/DMRLookup.cpp
+++ b/libmmdvm/src/DMRLookup.cpp
@@ -10,17 +10,35 @@
 #include <cstdlib>
 #include <cstring>
 #include <iostream>
+#include <algorithm>
 
 using namespace std;
 using namespace utils;
 
-CDMRLookup::CDMRLookup(const string& filepath) :
-m_file_dmrid(filepath + "/DMRIds.dat"),
-m_file_cc(filepath + "/CountryCode.txt"),
-m_table(),
-m_cc()
+bool compareByFirst(const std::pair<unsigned int, std::string>& a,
+                    const std::pair<unsigned int, std::string>& b) {
+    return a.first < b.first;
+}
+
+std::vector<std::pair<unsigned int, std::string>>::iterator find(
+    std::vector<std::pair<unsigned int, std::string>>& sorted_vec,
+    unsigned int key) {
+
+    auto it = std::lower_bound(sorted_vec.begin(), sorted_vec.end(), key, [](std::pair<unsigned int, std::string>& pair, unsigned int key) {
+        return pair.first < key;
+    });
+
+    if (it != sorted_vec.end() && it->first == key) {
+        return it;
+    }
+
+    return sorted_vec.end();
+}
+
+CDMRLookup::CDMRLookup(const string& filename) :
+m_file_dmrid(filename),
+m_vtable()
 {
-	// this->read();
 }
 
 CDMRLookup::~CDMRLookup() {
@@ -29,89 +47,71 @@ CDMRLookup::~CDMRLookup() {
 
 bool CDMRLookup::read() {
 	bool ret = load();
-	ret = loadCountryCode();
-	// bool ret = loadUsers();
-
 	return ret;
 }
 
-string CDMRLookup::find(string callsign) {
-	string line;
+string CDMRLookup::findCallsign(string uid) {
+	string callsign = uid;
+	unsigned int id = 0;
 	try {
-		line = m_table.at(callsign);
-		
+	    id = (unsigned int)::atoi(uid.c_str());
 	} catch (...) {
-		line = "";
+	    id = 0;
 	}
-
-	return line;
+	try {
+		auto it = find(m_vtable, id);
+		if (it == m_vtable.end()) {
+			return callsign;
+		}
+		std::string line = it->second;
+		char buffer[150U];
+		::strcpy(buffer, line.c_str());
+		char* s = buffer;
+		char* p1 = ::strsep(&s, "\t");
+		if (p1 != NULL) {
+			callsign = string(p1);
+		}
+	} catch (...) {
+	}
+	return callsign;
 }
 
-user_t CDMRLookup::findUser(string callsign) {	
+user_t CDMRLookup::findUser(string uid) {	
 	user_t user;
-
+	user.callsign = uid;
+	unsigned int id = 0;
 	try {
-		string line = find(callsign);
-		if (line == "") {
+	    id = (unsigned int)::atoi(uid.c_str());
+	} catch (...) {
+	    id = 0;
+	}
+	try {
+		auto it = find(m_vtable, id);
+		if (it == m_vtable.end()) {
 			return user;
 		}
-		
-		const char *buffer = line.c_str();
-		char* s = strdup(buffer);
+		std::string line = it->second;
+		char buffer[150U];
+		::strcpy(buffer, line.c_str());
+		char* s = buffer;
 		char* p1 = ::strsep(&s, "\t");
-		// char* p2 = ::strsep(&s, "\t");
+		char* p2 = ::strsep(&s, "\t");
 		char* p3 = ::strsep(&s, "\t");
 
 		if (p1 != NULL) {
-			user.name = string(p1);
+			user.callsign = string(p1);
 		}
-		// if (p2 != NULL) {
-		// 	user.city = string(p2);
-		// }
+		if (p2 != NULL) {
+			user.name = string(p2);
+		 }
 		if (p3 != NULL) {
-			user.country = m_cc.at(string(p3));
+			user.country = rtrim(string(p3));
 		}
-
 	} catch (...) {
-
 	}
-
 	return user;
 }
 
-bool CDMRLookup::loadCountryCode() {
-	FILE* fp = ::fopen(m_file_cc.c_str(), "rt");
-	if (fp == NULL) {
-		printf("Cannot open the CountryCode lookup file - %s\n", m_file_cc.c_str());
-		return false;
-	}
-
-	m_cc.clear();
-
-	char buffer[100U];
-
-	while (::fgets(buffer, 100U, fp) != NULL) {
-		if (buffer[0U] == '#')
-			continue;
-
-		char *s = buffer;
-		char *p1 = ::strsep(&s, " \t");
-
-		if (p1 != NULL) {
-			string iso = string(p1);
-			m_cc[iso] = rtrim(string(s));
-			// cout << m_cc[iso] << endl;
-		}
-	}
-
-	::fclose(fp);
-
-	size_t size = m_cc.size();
-	if (size == 0U)
-		return false;
-
-	return true;
-}
 
 bool CDMRLookup::load() {
 	FILE* fp = ::fopen(m_file_dmrid.c_str(), "rt");
@@ -120,97 +120,76 @@ bool CDMRLookup::load() {
 		return false;
 	}
 
-	m_table.clear();
+	m_vtable.clear();
 
 	char buffer[150U];
 
 	while (::fgets(buffer, 150U, fp) != NULL) {
 		if (buffer[0U] == '#')
 			continue;
-
-		// char *s = strdup(buffer);
-		char *s = buffer;
-
+		char* s = buffer;
 		char* p1 = ::strsep(&s, " \t");
-		char* p2 = ::strsep(&s, " \t");  // tokenize to eol to capture name as well
-
-		if (p1 != NULL && p2 != NULL) {
-			// unsigned int id = (unsigned int)::atoi(p1);
-			
-			string callsign = string(p2);
-			m_table[callsign] = rtrim(string(s));
-
-			// cout << m_table[callsign] << endl;
+		if (p1 != NULL) {
+			unsigned int id = 0;
+			try {
+			    id = (unsigned int)::atoi(p1);
+			    m_vtable.emplace_back(id, string(s));
+			} catch (...) {
+			    id = 0;
+			}
 		}
 	}
 
 	::fclose(fp);
 
-	size_t size = m_table.size();
+	size_t size = m_vtable.size();
 	if (size == 0U)
 		return false;
 
-	// LogInfo("Loaded %u Ids to the DMR callsign lookup table", size);
-
 	return true;
 }
 
 
-
-/*
-bool CDMRLookup::loadUsers() {
-	FILE* fp = ::fopen(m_filename.c_str(), "rt");
+bool CDMRLookup::append(const string & filename) {
+	FILE* fp = ::fopen(filename.c_str(), "rt");
 	if (fp == NULL) {
-		printf("Cannot open the DMR Id lookup file - %s\n", m_filename.c_str());
+		printf("Cannot open the DMR Id lookup file - %s\n", filename.c_str());
 		return false;
 	}
+        size_t sz = m_vtable.size();
 
-	m_users.clear();
-
-	char buffer[100U];
+	char buffer[150U];
+	auto it = m_vtable.begin();
 
-	while (::fgets(buffer, 100U, fp) != NULL) {
+	while (::fgets(buffer, 150U, fp) != NULL) {
 		if (buffer[0U] == '#')
 			continue;
-
-		user_t user;
-		string callsign;
-		char *s = strdup(buffer);
+		char* s = buffer;
 		char* p1 = ::strsep(&s, " \t");
-		// char* p2 = ::strsep(&s, " \r\n");  // tokenize to eol to capture name as well
-		char* p2 = ::strsep(&s, " \t");
-		char* p3 = ::strsep(&s, "\t");
-		char* p4 = ::strsep(&s, "\t");
-		char* p5 = ::strsep(&s, "\t");
-
-		if (p1 != NULL && p2 != NULL && p3 != NULL) {
-			unsigned int id = (unsigned int)::atoi(p1);
-			callsign = string(p2);
-			
-			// cout << callsign << endl;
-			user.id = id;
-			user.name = string(p3);
-		}
-
-		if (p4 != NULL) {
-			user.city = string(p4);
-		}
-
-		if (p5 != NULL) {
-			user.country = string(p5);
+		if (p1 != NULL) {
+			unsigned int id = 0;
+			try {
+				id = (unsigned int)::atoi(p1);
+				it = std::lower_bound(it, m_vtable.end(), id, [](std::pair<unsigned int, std::string>& pair, unsigned int key) {
+				        return pair.first < key;
+				    });
+				if (it == m_vtable.end() || it->first != id ) {
+					it = m_vtable.emplace(it, id, std::string(s));
+				} else {
+					it->second = string(s);
+				}
+			} catch (...) {
+			    id = 0;
+			}
 		}
-
-		m_users[callsign] = user;
 	}
 
 	::fclose(fp);
 
-	size_t size = m_users.size();
-	if (size == 0U)
+	size_t size = m_vtable.size();
+	if (size == sz )
 		return false;
-
-	// LogInfo("Loaded %u Ids to the DMR callsign lookup table", size);
 	return true;
 }
 
-*/
\ No newline at end of file
+
diff --git a/libmmdvm/src/DMRLookup.hpp b/libmmdvm/src/DMRLookup.hpp
index 1dd17d9..0486a89 100644
--- a/libmmdvm/src/DMRLookup.hpp
+++ b/libmmdvm/src/DMRLookup.hpp
@@ -7,30 +7,30 @@
 
 #include "DMRId.hpp"
 #include <string>
-#include <unordered_map>
+// #include <unordered_map>
+#include <vector>
+#include <utility>
 
 using namespace std;
 
 class CDMRLookup {
 public:
-	CDMRLookup(const string& filepath);
+	CDMRLookup(const string& filename);
 	virtual ~CDMRLookup();
 
 	bool read();
+	bool append(const string& filename);
 
-	string find(string callsign);
-	user_t findUser(string callsign);
+	string findCallsign(string uid);
+	user_t findUser(string uid);
 
 private:
 	string m_file_dmrid;
-	string m_file_cc;
 
-	unordered_map<string, string> m_table;
-	unordered_map<string, string> m_cc;
+	// unordered_map<unsigned int, string> m_table;
+	vector<pair<unsigned int, string> > m_vtable;
 
 	bool load();
-	bool loadCountryCode();
-	// bool loadUsers();
 };
 
 #endif
diff --git a/libmmdvm/src/Makefile b/libmmdvm/src/Makefile
index c00b5f3..da43656 100644
--- a/libmmdvm/src/Makefile
+++ b/libmmdvm/src/Makefile
@@ -15,7 +15,7 @@ LUAPATH = /usr/local/Cellar/lua/5.4.4_1/
 # LUAVER = 5.1
 # LUAPATH = /usr/local/Cellar/lua\@5.1/5.1.5_8
 
-CXXFLAGS = -g -O3 -Wall -std=c++0x -I$(LUAPATH)/include/lua$(LUAVER)
+CXXFLAGS = -g -O3 -Wall -std=c++11 -I$(LUAPATH)/include/lua$(LUAVER)
 LDFLAGS = -lm -L$(LUAPATH)/lib -bundle -undefined dynamic_lookup
 
 # CXXFLAGS = -g -O3 -Wall -std=c++0x
diff --git a/mmdvm-host/Makefile b/mmdvm-host/Makefile
index eb95967..52df4bd 100644
--- a/mmdvm-host/Makefile
+++ b/mmdvm-host/Makefile
@@ -56,6 +56,8 @@ endef
 
 define Package/${PKG_NAME}/conffiles
 /etc/MMDVM.ini
+/etc/getdmrid
+/etc/crontabs/root
 endef
 
 # define Package/${PKG_NAME}/postinst
@@ -69,4 +71,4 @@ endef
 # exit 0
 # endef
 
-$(eval $(call BuildPackage,${PKG_NAME}))
\ No newline at end of file
+$(eval $(call BuildPackage,${PKG_NAME}))
diff --git a/mmdvm-host/files/etc/MMDVM.ini b/mmdvm-host/files/etc/MMDVM.ini
index 77d5da5..1ab7c02 100644
--- a/mmdvm-host/files/etc/MMDVM.ini
+++ b/mmdvm-host/files/etc/MMDVM.ini
@@ -42,9 +42,12 @@ Time=24
 
 [Modem]
 ; Port=/dev/ttyS1
-; Port=/dev/ttyUSB0
 ; Port=/dev/ttyACM0
 ; Port=/dev/ttyAMA0
+; Port=/dev/ttyUSB0
+; Protocol=uart
+; UARTPort=/dev/ttyUSB0
+; UARTSpeed=115200
 Port=NullModem
 TXInvert=1
 RXInvert=0
diff --git a/mmdvm-host/files/etc/crontabs/root b/mmdvm-host/files/etc/crontabs/root
new file mode 100644
index 0000000..be63325
--- /dev/null
+++ b/mmdvm-host/files/etc/crontabs/root
@@ -0,0 +1,2 @@
+# */10 * * * * /etc/getdmrid
+18 18 * * * /etc/getdmrid -
diff --git a/mmdvm-host/files/etc/getdmrid b/mmdvm-host/files/etc/getdmrid
new file mode 100755
index 0000000..05ae190
--- /dev/null
+++ b/mmdvm-host/files/etc/getdmrid
@@ -0,0 +1,5 @@
+#!/bin/sh
+
+if [ ! -e /tmp/DMRIds.dat ] || [ `du -b /tmp/DMRIds.dat|awk '{print $1}'` -lt 10 ] || [ $# -gt 0 ]; then
+  curl -sSL https://radioid.net/static/user.csv|sed -e 's/,None/,/g' -e 's/,NULL,/,,/g' -e 's/,NA,/,,/g' -e 's/ ,/,/g'|awk 'BEGIN{FS=","}/^[1-9]/{gsub(/ /,"-",$NF);print $1,$2,$7,$3,$4,"_"}'|awk 'BEGIN{FS=" +";OFS="\t"}{gsub(/-/," ",$3);print $1,$2,$4,$3}'>/tmp/DMRIds-new.dat && diff /rom/etc/mmdvm/DMRIds.dat /tmp/DMRIds-new.dat|grep ^+|grep -v ^+++|sed -e 's/^+//g'>/tmp/DMRIds.dat && rm /tmp/DMRIds-new.dat && /etc/init.d/dmrid restart
+fi

diff --git a/mmdvm-host/patches/003-dmrlookup.patch b/mmdvm-host/patches/003-dmrlookup.patch
new file mode 100644
index 0000000..7abbe45
--- /dev/null
+++ b/mmdvm-host/patches/003-dmrlookup.patch
@@ -0,0 +1,56 @@
+diff --git a/DMRLookup.cpp b/DMRLookup.cpp
+--- a/DMRLookup.cpp
++++ b/DMRLookup.cpp
+@@ -150,49 +150,5 @@ bool CDMRLookup::exists(unsigned int id)
+ 
+ bool CDMRLookup::load()
+ {
+-	FILE* fp = ::fopen(m_filename.c_str(), "rt");
+-	if (fp == NULL) {
+-		LogWarning("Cannot open the DMR Id lookup file - %s", m_filename.c_str());
+-		return false;
+-	}
+-
+-	m_mutex.lock();
+-
+-	// Remove the old entries
+-	m_table.clear();
+-
+-	char buffer[100U];
+-	while (::fgets(buffer, 100U, fp) != NULL) {
+-		if (buffer[0U] == '#')
+-			continue;
+-
+-		char* p1 = ::strtok(buffer, " \t\r\n");
+-		char* p2 = ::strtok(NULL, " \r\n");  // tokenize to eol to capture name as well
+-
+-		if (p1 != NULL && p2 != NULL) {
+-			unsigned int id = (unsigned int)::atoi(p1);
+-			for (char* p = p2; *p != 0x00U; p++) {
+-				
+-				if(*p == 0x09U) 
+-					*p = 0x20U;
+-				
+-				else 
+-					*p = ::toupper(*p);
+-				
+-			}
+-			m_table[id] = std::string(p2);
+-		}
+-	}
+-
+-	m_mutex.unlock();
+-
+-	::fclose(fp);
+-
+-	size_t size = m_table.size();
+-	if (size == 0U)
+-		return false;
+-
+-	LogInfo("Loaded %u Ids to the DMR callsign lookup table", size);
+-
+-	return true;
+-}
+\ No newline at end of file
++	return false;
++}
diff --git a/mmdvm-luci/luci-app-mmdvm/htdocs/luci-static/resources/mmdvm.css b/mmdvm-luci/luci-app-mmdvm/htdocs/luci-static/resources/mmdvm.css
index 8011efb..69aad7a 100644
--- a/mmdvm-luci/luci-app-mmdvm/htdocs/luci-static/resources/mmdvm.css
+++ b/mmdvm-luci/luci-app-mmdvm/htdocs/luci-static/resources/mmdvm.css
@@ -117,22 +117,22 @@ h2 { font-size: 16px;}
 }
   
 .lh_detail_callsign {
-    font-family: 'enhanced_led_board-7regular', Arial, sans-serif; 
+    font-family: Arial, sans-serif;
     color:#202020; background-color: #FFCC00;
 }
 .lh_detail_callsign p.callsign {color: #202020; font-size: 22px; font-weight: bold; margin-top: 15px; margin-bottom: 15px;text-align: center}
-.lh_detail_callsign p {margin: 0px; font-size: 11px; text-align: left;}
+.lh_detail_callsign p {margin: 0px; font-size: 12px; font-weight: bold; text-align: left;}
 .lh_detail {
-    font-family: 'enhanced_led_board-7regular', Arial, sans-serif; 
+    font-family: Arial, sans-serif;
     color:#fff; background-color: #202020;
     text-align: left;
 }
-.lh_detail p {margin: 0px; font-size: 10px;}
+.lh_detail p {margin: 0px; font-size: 11px;}
 
 #livecall { height: 100%;}
 #livecall td{
     color: #202020;
-    font-family: 'enhanced_led_board-7regular', Arial, sans-serif; background-color: #d38032;
+    font-family: Arial, sans-serif; background-color: #d38032;
 }
 #livecall p {
     font-size: 3vw; text-align: left; margin: 1.8vw;
@@ -192,4 +192,4 @@ h2 { font-size: 16px;}
 }
 
 @media screen and (orientation: landscape){
-}
\ No newline at end of file
+}
diff --git a/mmdvm-luci/luci-app-mmdvm/luasrc/controller/mmdvm/public.lua b/mmdvm-luci/luci-app-mmdvm/luasrc/controller/mmdvm/public.lua
index 1b268e5..1fa40e3 100644
--- a/mmdvm-luci/luci-app-mmdvm/luasrc/controller/mmdvm/public.lua
+++ b/mmdvm-luci/luci-app-mmdvm/luasrc/controller/mmdvm/public.lua
@@ -68,13 +68,13 @@ function action_logread(type)
 end
 
 function action_dashboard()
-	local lastheard = mmdvm.get_lastheard()
-	luci.template.render("mmdvm/dashboard", {lastheard = lastheard})
+	--- local lastheard = mmdvm.get_lastheard()
+	luci.template.render("mmdvm/dashboard", {})
 end
 
 function action_lastheard()
-	local lastheard = mmdvm.get_lastheard()
-	luci.template.render("mmdvm/lastheard", {lastheard = lastheard})
+	-- local lastheard = mmdvm.get_lastheard()
+	luci.template.render("mmdvm/lastheard", {})
 end
 
 function action_last_pocsag()
@@ -83,11 +83,11 @@ function action_last_pocsag()
 end
 
 function action_livecall()
-	local lastheard = mmdvm.get_lastheard()
-	luci.template.render("mmdvm/livecall", {lastheard = lastheard})
+	-- local lastheard = mmdvm.get_lastheard()
+	luci.template.render("mmdvm/livecall", {})
 end
 
 function action_lc()
-	local lastheard = mmdvm.get_lastheard()
-	luci.template.render("mmdvm/lc", {lastheard = lastheard})
+	-- local lastheard = mmdvm.get_lastheard()
+	luci.template.render("mmdvm/lc", {})
 end
diff --git a/mmdvm-luci/luci-app-mmdvm/luasrc/model/mmdvm.lua b/mmdvm-luci/luci-app-mmdvm/luasrc/model/mmdvm.lua
index 7797a39..332cf93 100644
--- a/mmdvm-luci/luci-app-mmdvm/luasrc/model/mmdvm.lua
+++ b/mmdvm-luci/luci-app-mmdvm/luasrc/model/mmdvm.lua
@@ -512,7 +512,6 @@ end
 
 local function get_hearlist(loglines)
 	local headlist = {}
-	local duration, loss, ber, rssi
 	-- local ts1duration, ts1loss, ts1ber, ts1rssi
 	-- local ts2duration, ts2loss, ts2ber, ts2rssi
 	-- local ysfduration, ysfloss, ysfber, ysfrssi
@@ -520,6 +519,7 @@ local function get_hearlist(loglines)
 
 	for i = 1, #loglines do
 		local logline = loglines[i]
+		local duration, loss, ber, rssi
 		-- remoing invaild lines
 		repeat
 			if string.find(logline, "BS_Dwn_Act") or
@@ -734,4 +734,4 @@ function get_last_pocsag()
 	end
 
 	return logs
-end
\ No newline at end of file
+end
diff --git a/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/dashboard.htm b/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/dashboard.htm
index dbd237c..23ac01c 100644
--- a/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/dashboard.htm
+++ b/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/dashboard.htm
@@ -8,7 +8,7 @@ This is free software, licensed under the GNU GENERAL PUBLIC LICENSE, Version 2.
 <%+header%>
 <link rel="stylesheet" href="<%=resource%>/mmdvm.css">
 <div id="lh">
-<% luci.template.render("mmdvm/lastheard", {lastheard = lastheard} ) %>
+<% luci.template.render("mmdvm/lastheard", {} ) %>
 </div>
 <% if luci.model.mmdvm.pocsag_enabled() then %>
 <h2><%:DAPNET Gateway Activity%></h2>
@@ -39,4 +39,4 @@ This is free software, licensed under the GNU GENERAL PUBLIC LICENSE, Version 2.
 	});
 //]]>
 </script>
-<% luci.template.render("mmdvm/footer")%>
\ No newline at end of file
+<% luci.template.render("mmdvm/footer")%>
diff --git a/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/footer.htm b/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/footer.htm
index b9e343a..d0afa6c 100644
--- a/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/footer.htm
+++ b/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/footer.htm
@@ -9,7 +9,7 @@
 <% local ver = require "luci.version" %>
 
    <footer>
-    <a href="https://github.com/lazywalker/mmdvm-openwrt">Powered by OSTAR</a>, BD7MQB/ <%= ver.distversion %>
+    <a href="https://hose.brandmeister.network">Powered by OSTAR</a>, Fndsz, / <%= ver.distversion %>
     <ul class="breadcrumb pull-right" id="modemenu" style="display:none"></ul>
    </footer>
   </div>
diff --git a/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/lastheard.htm b/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/lastheard.htm
index 0b0f507..03dcf6a 100644
--- a/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/lastheard.htm
+++ b/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/lastheard.htm
@@ -2,75 +2,80 @@
 Copyright 2019-2020 Michael BD7MQB <bd7mqb@qq.com>
 This is free software, licensed under the GNU GENERAL PUBLIC LICENSE, Version 2.0
 -%>
-<%  if lastheard and #lastheard > 0 then %>
+<% local llh = luci.util.ubus("dmrid", "get_lastheard", {}) or {lh={}}
+local lastheard = llh.lh
+local limit = llh.limit
+local headlist = {}
+if lastheard and #lastheard > 0 then
+  for i, lh in ipairs(lastheard) do
+     if i > limit then
+         break
+     end
+     if not headlist[lh.mode] then
+        headlist[lh.mode] = i
+     end
+  end
+end
+local keys = {}
+for k, _ in pairs(headlist) do
+   table.insert(keys, k)
+end
+table.sort(keys, function(a,b) return a<b end)
+
+if keys and #keys > 0 then %>
 <table border="0">
     <tr>
         <th align="left"><div class="plaintext"><a href="<%=luci.dispatcher.build_url("mmdvm", "livecall")%>" class="item-content item-link">< <%:Live Caller%></a></div></th>
         <th align="right" width="45%">
-        <% 
-        local lh = lastheard[1]
-        local callsign = lh.callsign
-
-        if not tonumber(callsign) then 
-            if string.find(callsign, "/") then
-                callsign = string.sub(callsign, 1, string.find(callsign, "/")-1)
-            elseif string.find(callsign, "-") then
-                callsign = string.sub(callsign, 1, string.find(callsign, "-")-1)
-            end
+            <div class="plaintext"><a href="https://hose.brandmeister.network" target="_blank" class="link external">Hoseline<i class="f7-icons">volume</i></a></div>
+        </th>
+    </tr>
+  <%
+    local mmdvm = require("luci.model.mmdvm")
+    for _, k in ipairs(keys) do
+        local i = headlist[k]
+        local lh = lastheard[i]
+        local user = luci.util.ubus("dmrid", "get_user_by_uid", {uid = lh.callsign}) or {callsign="", name="_", country="_" }
+	local target = lh.target
+	if string.len(target) > 6 and tonumber(target) then
+            local tobj = luci.util.ubus("dmrid", "get_callsign_by_uid", {uid = target}) or {callsign=target}
+            target = tobj.callsign
         end
-
-        local user = luci.util.ubus("dmrid", "get_by_callsign", {callsign = callsign}) or {
-            name="Unknown", country="Somewhere"
-        }
-
-        if string.find(lh.mode, "DMR") then
-            local tg = tonumber(string.sub(lh.target, 4))
-            if tg and tg > 90 then
-        %>
-            <div class="plaintext"><a href="https://hose.brandmeister.network/<%=tg%>" target="_blank" class="link external"><i class="f7-icons">volume</i></a></div>
-        <% 
-            end
-        end 
         %>
-        </th>
-        </tr>
     <tr>
         <td class="lh_detail_callsign">
-            <p class="callsign"><%=lh.callsign%></p>
+            <p class="callsign"><%=user.callsign or lh.callsign%></p>
         </td>
         <td class="lh_detail_callsign">
-            <p><%=user.name or "Unknown" %></p>
-            <p><%=user.country or "Somewhere" %></p>
+            <p><%=user.name or "_" %></p>
+            <p><%=user.country or "_" %></p>
         </td>
         </tr>
     <tr>
         <td class="lh_detail">
-            <p>Source - <%=lh.source%></p>
-            <p><%=lh.mode%> - <%=lh.target%></p>
+            <p><%:Src%>: <%=lh.source%> &nbsp;&nbsp; <%:Mode%>: <%=lh.mode%> &nbsp;&nbsp; <%:Target%>: <%=target or lh.target%></p>
         </td>
         <td class="lh_detail">
         <p>
         <% if lh.duration then %>
-        <p>Duration <%=lh.duration%>s</p>
-        <p>Loss <%="%0.1f" % {lh.loss} %>% &nbsp;&nbsp; BER <%="%0.1f" % {lh.ber}%>%</p>
-        <% else 
-            local mmdvm = require("luci.model.mmdvm")
+        <p><%:Dur%>: <%=lh.duration%>s &nbsp;&nbsp; <%:Loss%>: <%="%0.1f" % {lh.loss} %>% &nbsp;&nbsp; <%:BER%>: <%="%0.1f" % {lh.ber}%>%</p>
+        <% else
             local t = os.time() - mmdvm.s2t(lh.timestamp)
         %>
-        <p>Duration <%=t%>s</p>
-        <p>Transmiting ...</p>
+        <p><%:Dur%>: <%=t%>s &nbsp;&nbsp; <%:Transmiting ...%></p>
         <% end %>
         </p>
         </td>
     </tr>
+    <% end %>
 </table>
 <% end %>
 <h2><%:Gateway Activity%></h2>
 <div id="lh">
-<% luci.template.render("mmdvm/lh", {lastheard = lastheard} ) %>
+<% luci.template.render("mmdvm/lh", {lastheard = lastheard, limit=limit} ) %>
 </div>
 
 <h2><%:Local RF%></h2>
 <div id="localtx">
 <% luci.template.render("mmdvm/lh", {lastheard = lastheard, localtx = 1} ) %>
-</div>
\ No newline at end of file
+</div>
diff --git a/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/lc.htm b/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/lc.htm
index 63d6118..71c751d 100644
--- a/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/lc.htm
+++ b/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/lc.htm
@@ -2,21 +2,40 @@
 Copyright 2019-2020 Michael BD7MQB <bd7mqb@qq.com>
 This is free software, licensed under the GNU GENERAL PUBLIC LICENSE, Version 2.0
 -%>
-<%  if lastheard and #lastheard > 0 then %>
-<table id="livecall">
-        <% 
-        local uci   = require("luci.model.uci").cursor()
-        local lh = lastheard[1]
-        local callsign = lh.callsign
-        if string.find(callsign, "/") then
-            callsign = string.sub(callsign, 1, string.find(callsign, "/")-1)
-        elseif string.find(callsign, "-") then
-        callsign = string.sub(callsign, 1, string.find(callsign, "-")-1)
-        end
+<% local llh = luci.util.ubus("dmrid", "get_lastheard", {}) or {lh={}}
+local lastheard = llh.lh
+local limit = llh.limit
+local headlist = {}
+if lastheard and #lastheard > 0 then
+  for i, lh in ipairs(lastheard) do
+     if i > limit then
+         break
+     end
+     if not headlist[lh.mode] then
+        headlist[lh.mode] = i
+     end
+  end
+end
+local keys = {}
+for k, _ in pairs(headlist) do
+   table.insert(keys, k)
+end
+table.sort(keys, function(a,b) return a<b end)
 
-        local user = luci.util.ubus("dmrid", "get_by_callsign", {callsign = callsign}) or {
-            name="Unknown", country="Somewhere"
-        }
+if keys and #keys > 0 then %>
+<table id="livecall">
+    <%
+    local uci   = require("luci.model.uci").cursor()
+    local mmdvm = require("luci.model.mmdvm")
+    for _, key in ipairs(keys) do
+        local i = headlist[key]
+        local lh = lastheard[i]
+        local user = luci.util.ubus("dmrid", "get_user_by_uid", {uid = lh.callsign}) or { callsign="", name="_", country="_" }
+        local target = lh.target
+        if string.len(target) > 6 and tonumber(target) then
+		local tobj = luci.util.ubus("dmrid", "get_callsign_by_uid", {uid = target}) or {callsign=target}
+		target = tobj.callsign
+	end
 
         local modes = {
             { name='DMR', status=(uci:get('mmdvm', 'DMR', 'Enable') == '1' and {'ON'} or {'OFF'})[1] },
@@ -34,17 +53,16 @@ This is free software, licensed under the GNU GENERAL PUBLIC LICENSE, Version 2.
     <tr>
         <td>
             <div id="back"><a href="<%=luci.dispatcher.build_url('mmdvm', 'dashboard')%>"><< </a></div>
-            <label class="callsign"><%=callsign%></label>
+            <label class="callsign"><%=user.callsign or lh.callsign%></label>
         </td>
         <td width="40%">
-            <p><%=user.name or "Unknown"%></p>
-            <p><%=user.country or "Somewhere"%></p>
+            <p><%=user.name or "_" %></p>
+            <p><%=user.country or "_"%></p>
         </td>
         </tr>
     <tr>
-        <td height="40%">
-            <p>Source - <%=lh.source:upper()%></p>
-            <p class="mode"><%=lh.mode%> - <%=lh.target%></p>
+        <td height="20%">
+            <p><%:Src%>: <%=lh.source:upper()%> &nbsp;&nbsp; <%=lh.mode%> - <%=target or lh.target%></p>
             <p>
                 <% for _, mode in ipairs(modes) do %>
                 <label class="mode <%=mode.status%>" title="<%=mode.name%> <%=mode.status%>"><%=mode.name%></label>
@@ -52,21 +70,15 @@ This is free software, licensed under the GNU GENERAL PUBLIC LICENSE, Version 2.
             </p>
         </td>
         <td>
-        <p>
         <% if lh.duration then %>
-        <p>Duration <%=lh.duration%>s</p>
-        <p>Loss <%="%0.1f" % {lh.loss} %>%</p>
-        <p>BER <%="%0.1f" % {lh.ber}%>%</p>
+	<p><%:Dur%>: <%=lh.duration%>s</p><p><%:Loss%>: <%="%0.1f" % {lh.loss} %>% &nbsp;&nbsp; <%:BER%>: <%="%0.1f" % {lh.ber}%>%</p>
         <% else 
-            local mmdvm = require("luci.model.mmdvm")
             local t = os.time() - mmdvm.s2t(lh.timestamp)
         %>
-        <p>Duration <%=t%>s</p>
-        <p>Transmiting ...</p>
-        <p>&nbsp;</p>
+	<p><%:Dur%> <%=t%>s</p><p><%:Transmiting ...%></p>
         <% end %>
-        </p>
         </td>
     </tr>
+    <% end %>
 </table>
-<% end %>
\ No newline at end of file
+<% end %>
diff --git a/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/lh.htm b/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/lh.htm
index cf59d39..8d11b92 100644
--- a/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/lh.htm
+++ b/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/lh.htm
@@ -7,15 +7,18 @@ This is free software, licensed under the GNU GENERAL PUBLIC LICENSE, Version 2.
 	<th class="auto-display"><%:Time%></th>
 	<th class="auto-display2"><%:Mode%></th>
 	<th class="auto-display3">M</th>
-	<th><%:Callsign%></th>
 	<th><%:Target%></th>
+	<th><%:Callsign%></th>
+	<th class="auto-display2"><%:ID%></th>
+	<th class="auto-display"><%:Name%></th>
+	<th class="auto-display"><%:Pos%></th>
 	<th class="auto-display2"><%:Src%></th>
 	<th><%:Dur%></th>
 	<th><%:Loss%></th>
 	<th><%:BER%></th>
 </tr>
 <% for i, lh in ipairs(lastheard) do
-if not localtx and i > 20 then
+if not localtx and i > limit then
 	break
 end
 
@@ -45,13 +48,22 @@ elseif lh.ber >= 2.0 and lh.ber <= 4.9 then
 else
 	ber_color = "#f33"
 end
+local user = luci.util.ubus("dmrid", "get_user_by_uid", {uid = lh.callsign}) or { callsign="", name="_", country="_" }
+local target = lh.target
+if string.len(target)>6 and tonumber(target) then
+	local tobj = luci.util.ubus("dmrid", "get_callsign_by_uid", {uid = target}) or {callsign=target}
+	target = tobj.callsign
+end
 %>
 <tr>
 	<td class="auto-display"><%=lh.timestamp%></td>
 	<td class="auto-display2"><%=lh.mode%></td>
 	<td class="auto-display3"><%=string.sub(lh.mode, 1, 1)%></td>
-	<td><a href="http://www.qrz.com/db/<%=lh.callsign%>" target="_blank"><%=lh.callsign%></a></td>
-	<td><%=lh.target%></td>
+	<td><%=target or lh.target%></td>
+	<td><a href="http://www.qrz.com/db/<%=user.callsign or lh.callsign%>" target="_blank"><%=user.callsign or lh.callsign%></a></td>
+	<td class="auto-display2"><%=lh.callsign%></td>
+	<td class="auto-display"><%=user.name%></td>
+	<td class="auto-display"><%=user.country%></td>
 	<% if lh.source == "RF" then %>
 	<td style="background:#1d1;" class="auto-display2">RF</td>
 	<% else %>
diff --git a/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/livecall.htm b/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/livecall.htm
index b2a2cb2..17e3266 100644
--- a/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/livecall.htm
+++ b/mmdvm-luci/luci-app-mmdvm/luasrc/view/mmdvm/livecall.htm
@@ -18,7 +18,7 @@ This is free software, licensed under the GNU GENERAL PUBLIC LICENSE, Version 2.
 	</head>
 	<body>
     <div id="lc">
-        <% luci.template.render("mmdvm/lc", {lastheard = lastheard} ) %>
+        <% luci.template.render("mmdvm/lc", {} ) %>
     </div>
     <script type="text/javascript">
     //<![CDATA[
@@ -51,4 +51,4 @@ This is free software, licensed under the GNU GENERAL PUBLIC LICENSE, Version 2.
         }
     //]]>
     </script>
-</body>
\ No newline at end of file
+</body>
diff --git a/mmdvm-luci/luci-app-mmdvm/po/templates/mmdvm.pot b/mmdvm-luci/luci-app-mmdvm/po/templates/mmdvm.pot
index 2074356..0d85777 100644
--- a/mmdvm-luci/luci-app-mmdvm/po/templates/mmdvm.pot
+++ b/mmdvm-luci/luci-app-mmdvm/po/templates/mmdvm.pot
@@ -10,6 +10,9 @@ msgstr ""
 msgid "BER"
 msgstr ""
 
+msgid "Transmiting ..."
+msgstr ""
+
 msgid "Callsign"
 msgstr ""
 
@@ -90,6 +93,9 @@ msgstr ""
 msgid "ID"
 msgstr ""
 
+msgid "Pos"
+msgstr ""
+
 msgid "InactivityTimeout"
 msgstr ""
 
diff --git a/mmdvm-luci/luci-app-mmdvm/po/zh-cn/mmdvm.po b/mmdvm-luci/luci-app-mmdvm/po/zh-cn/mmdvm.po
index 4789903..0cc7e5b 100644
--- a/mmdvm-luci/luci-app-mmdvm/po/zh-cn/mmdvm.po
+++ b/mmdvm-luci/luci-app-mmdvm/po/zh-cn/mmdvm.po
@@ -18,6 +18,9 @@ msgstr "密钥"
 msgid "BER"
 msgstr "误码"
 
+msgid "Transmiting ..."
+msgstr "发射中..."
+
 msgid "Callsign"
 msgstr "呼号"
 
@@ -110,6 +113,9 @@ msgstr "在此你可以编辑设备的配置，如呼号、操作模式等"
 msgid "ID"
 msgstr ""
 
+msgid "Pos"
+msgstr "位置"
+
 msgid "InactivityTimeout"
 msgstr "最大空闲时间"
 
diff --git a/mmdvm-luci/luci-app-mmdvm/root/usr/sbin/dmrid.lua b/mmdvm-luci/luci-app-mmdvm/root/usr/sbin/dmrid.lua
index cc2ad3b..14e9a6d 100755
--- a/mmdvm-luci/luci-app-mmdvm/root/usr/sbin/dmrid.lua
+++ b/mmdvm-luci/luci-app-mmdvm/root/usr/sbin/dmrid.lua
@@ -5,6 +5,10 @@
 
 require "ubus" -- opkg install libubus-lua
 require "uloop" -- opkg install libubox-lua
+local io = io
+local os = os
+local coroutine = coroutine
+local util  = require "luci.util"
 
 local conn = ubus.connect()
 if not conn then
@@ -18,71 +22,7 @@ local function shell(command)
     return result
 end
 
---- Returns a table containing all the data from the INI file.
---@param fileName The name of the INI file to parse. [string]
---@return The table containing all data from the INI file. [table]
-local function ini_load(fileName)
-	assert(type(fileName) == 'string', 'Parameter "fileName" must be a string.')
-	local file = assert(io.open(fileName, 'r'), 'Error loading file : ' .. fileName)
-	local data = {}
-	local section
-	for line in file:lines() do
-		local tempSection = line:match('^%[([^%[%]]+)%]$')
-		if(tempSection)then
-			section = tonumber(tempSection) and tonumber(tempSection) or tempSection
-			data[section] = data[section] or {}
-		end
-		local param, value = line:match('^([%w|_]+)%s-=%s-(.+)$')
-		if(param and value ~= nil)then
-			if(tonumber(value))then
-				value = tonumber(value)
-			elseif(value == 'true')then
-				value = true
-			elseif(value == 'false')then
-				value = false
-			end
-			if(tonumber(param))then
-				param = tonumber(param)
-			end
-			data[section][param] = value
-		end
-	end
-	file:close()
-	return data
-end
 
-local function split(str, pat, max, regex)
-	pat = pat or "\n"
-	max = max or #str
-
-	local t = {}
-	local c = 1
-
-	if #str == 0 then
-		return {""}
-	end
-
-	if #pat == 0 then
-		return nil
-	end
-
-	if max == 0 then
-		return str
-	end
-
-	repeat
-		local s, e = str:find(pat, c, not regex)
-		max = max - 1
-		if s and max < 0 then
-			t[#t+1] = str:sub(c)
-		else
-			t[#t+1] = str:sub(c, s and s - 1)
-		end
-		c = e and e + 1 or #str + 1
-	until not s or max < 0
-
-	return t
-end
 
 local pid = tonumber(shell("cat /proc/self/stat | awk '{print $1}'")) or 0
 local function log(msg)
@@ -91,39 +31,342 @@ local function log(msg)
     conn:call("log", "write", {event = msg})
 end
 
--- local dmrid_file = ini_load("/etc/MMDVM.ini")["DMR Id Lookup"].File or "/etc/mmdvm/"
-local dmrid_file = "/etc/mmdvm/"
-log("Loading DMRIds from " .. dmrid_file .. " ...")
--- local user_count = load_users(dmrid_file)
--- log("Loaded " .. user_count .." Ids to the callsign lookup table ... Done")
 
 uloop.init()
 
 local mmdvm = require("mmdvm")
-mmdvm.init(dmrid_file)
+local dmrid_file = "/etc/mmdvm/DMRIds.dat"
+local dmrid_file1 = "/tmp/DMRIds.dat"
+mmdvm.init(dmrid_file, dmrid_file1)
+
+-- Check if a file exists
+local function file_exists(file)
+    local f = io.open(file, "r")
+    if f then f:close() end
+    return f ~= nil
+end
+
+-- Get the tail line in logfile
+local function get_tail_line(logfile)
+    return util.trim(util.exec("tail -n1 %s" % {logfile}))
+end
+
+-- Current log file name
+local current_logfile = nil
+-- Read line
+local last_lines = {}
+-- cmd for read log
+local cmdlines = {}
+
+-- Log watcher coroutine function
+local function log_watcher(logfile)
+    local cmd = string.format("tail -n2000 -f %s", logfile)
+    local handle = io.popen(cmd, "r")
+    if not handle then
+        error("failed call io.popen()")
+    end
+    if logfile ~= current_logfile then
+        coroutine.yield()
+    end
+    cmdlines[logfile] = cmd
+    while true do
+        local tail_line = get_tail_line(logfile)
+        local lines = {}
+        local read_line = last_lines[logfile]
+        while tail_line ~= read_line do
+            read_line = handle:read("*line")
+            if read_line then
+                -- Apply the filter rule
+                if read_line:match("from") or read_line:match("end") or read_line:match("watchdog") or read_line:match("lost") then
+                    -- Yield the new line to the waiting coroutine
+                    table.insert(lines, 1, read_line)
+                end
+            end
+        end
+        last_lines[logfile] = read_line
+        coroutine.yield(lines)
+    end
+    handle:close()
+end
+
+-- Log watching coroutine
+local log_coroutines = {}
+
+-- Initialize or update the log watcher coroutine
+local function update_log_watcher()
+    local new_logfile = string.format("/var/log/mmdvm/MMDVM-%s.log", os.date("%Y-%m-%d"))
+    -- If the log file name has changed, restart the coroutine
+    if new_logfile ~= current_logfile then
+        if file_exists(new_logfile) then
+            if current_logfile then
+                local cmdline = cmdlines[current_logfile]
+                if cmdline then
+                    -- Kill the tail -f command
+                    local cmd = "ps|grep \"" .. cmdline .. "\"|grep -v grep|awk '{print $1}'|xargs kill"
+                    util.exec(cmd)
+                    cmdlines[current_logfile] = nil
+                end
+                current_logfile = nil
+            end
+            local log_coroutine = coroutine.create(log_watcher)
+            local status, err = coroutine.resume(log_coroutine, new_logfile)
+            if status then
+                log_coroutines[new_logfile] = log_coroutine
+                current_logfile = new_logfile
+            end
+        end
+    end
+end
+
+-- Function to get the MMDVM log
+local function get_mmdvm_log()
+    -- Table to hold the log lines
+    local log_lines = {}
+    -- Update the log watcher if the date has changed
+    update_log_watcher()
+    if current_logfile  then
+        local log_coroutine = log_coroutines[current_logfile]
+        -- Check if the coroutine has a new log line
+        if log_coroutine and coroutine.status(log_coroutine) == "suspended" then
+            local status, lines = coroutine.resume(log_coroutine)
+            if status and #lines > 0 then
+                -- Insert the new lines into the log lines table
+                for _, line in ipairs(lines) do
+                    table.insert(log_lines, 1, line)
+                end
+            end
+        end
+        table.sort(log_lines, function(a,b) return a>b end)
+    end
+    return log_lines
+end
+
+local function get_hearlist(log_lines)
+    local headlist = {}
+    -- local ts1duration, ts1loss, ts1ber, ts1rssi
+    -- local ts2duration, ts2loss, ts2ber, ts2rssi
+    -- local ysfduration, ysfloss, ysfber, ysfrssi
+    -- local p25duration, p25loss, p25ber, p25rssi
+
+    for i = 1, #log_lines do
+        local logline = log_lines[i]
+        local duration, loss, ber, rssi
+        -- remoing invaild lines
+        repeat
+            if string.find(logline, "BS_Dwn_Act") or
+                string.find(logline, "invalid access") or
+                string.find(logline, "received RF header for wrong repeater") or
+                string.find(logline, "Error returned") or
+                string.find(logline, "unable to decode the network CSBK") or
+                string.find(logline, "overflow in the DMR slot RF queue") or
+                string.find(logline, "non repeater RF header received") or
+                string.find(logline, "Embedded Talker Alias") or
+                string.find(logline, "DMR Talker Alias") or
+                string.find(logline, "CSBK Preamble") or
+                string.find(logline, "Preamble CSBK") or
+                string.find(logline, "Preamble VSBK") or
+                string.find(logline, "Downlink Activate received") or
+                string.find(logline, "Received a NAK") or
+                string.find(logline, "late entry")
+            then
+                break
+            end
+
+            local mode = string.sub(logline, 28, (string.find(logline, ",") or 0)-1)
+
+            if string.find(logline, "end of")
+                or string.find(logline, "watchdog has expired")
+                or string.find(logline, "ended RF data")
+                or string.find(logline, "ended network")
+                or string.find(logline, "RF user has timed out")
+                or string.find(logline, "transmission lost")
+                or string.find(logline, "D-Star")
+                or string.find(logline, "POCSAG")
+            then
+                local linetokens = logline:split(", ")
+                local count_tokens = (linetokens and #linetokens) or 0
+
+                if string.find(logline, "RF user has timed out") then
+                    duration = "-1"
+                    ber = "-1"
+                else
+                    if count_tokens >= 3 then
+                        duration = string.trim(string.sub(linetokens[3], 1, string.find(linetokens[3], " ")))
+                    end
+                    if count_tokens >= 4 then
+                        loss = linetokens[4]
+                    end
+                end
+
+                -- if RF-Packet, no LOSS would be reported, so BER is in LOSS position
+                if string.find(loss or "", "BER") == 1 then
+                    ber = string.trim(string.sub(loss, 6, 8))
+
+                    loss = "0"
+                    -- TODO: RSSI
+                else
+                    loss = string.trim(string.sub(loss or "", 1, -14))
+                    if count_tokens >= 5 then
+                        ber = string.trim(string.sub(linetokens[5] or "", 6, -2))
+
+                    end
+                end
+
+            end
+
+            local timestamp = string.sub(logline, 4, 22)
+            local callsign, target
+            local source = "RF"
+
+            if mode ~= 'POCSAG' then
+                if string.find(logline, "from") and string.find(logline, "to") then
+                    callsign = string.gsub(string.trim(string.sub(logline, string.find(logline, "from")+5, string.find(logline, "to") - 2)), " ", "")
+                    target = string.sub(logline, string.find(logline, "to") + 3)
+                    target = string.gsub(string.trim(string.sub(target, 0, string.find(target, ","))), ",", "")
+                end
+                if string.find(logline, "network") then
+                    source = "Net"
+                end
+            end
+            -- if mode then
+                -- switch selection of mode
+                local switch = {
+                    ["DMR Slot 1"] = function()
+                        if string.find(logline, "ended RF data") or string.find(logline, "ended network") then
+                            duration = "SMS"
+                        end
+                    end,
+                    ["DMR Slot 2"] = function()
+                        if string.find(logline, "ended RF data") or string.find(logline, "ended network") then
+                            duration = "SMS"
+                        end
+                    end,
+                    ["YSF"] = function()
+                        if target and target:find('at') then
+                            target = string.trim(string.sub(target, 14))
+                        end
+                    end,
+                    ["P25"] = function()
+                        if source == "Net" then
+                            if target == "TG 10" then
+                                callsign = "PARROT"
+                            end
+                            if callsign == "10999" then
+                                callsign = "MMDVM"
+                            end
+                        end
+                    end,
+                    ["NXDN"] = function()
+                        if source == "Net" then
+                            if target == "TG 10" then
+                                callsign = "PARROT"
+                            end
+                        end
+                    end,
+                    ["D-Star"] = function()
+
+                    end,
+                    ["POCSAG"] = function()
+                        callsign = 'DAPNET'
+                        source = "Net"
+                        target = 'ALL'
+                        duration = '0.0'
+                        loss = '0'
+                        ber = '0.0'
+                    end,
+                }
+                local f = switch[mode]
+                if(f) then f() end
+                -- end of switch
+            -- end
+
+            -- Callsign or ID should be less than 11 chars long, otherwise it could be errorneous
+            if callsign and #callsign:trim() <= 11 then
+                table.insert(headlist,
+                    {
+                        timestamp = timestamp,
+                        mode = mode,
+                        callsign = callsign,
+                        target = target,
+                        source = source,
+                        duration = duration,
+                        loss = tonumber(loss) or 0,
+                        ber = tonumber(ber) or 0,
+                        rssi = rssi
+                    }
+                )
+            end
+
+        until true -- end repeat
+    end -- end loop
+
+    -- table.insert(headlist,
+    --  {
+    --      timestamp = "timestamp",
+    --      mode = "mode",
+    --      callsign = "callsign",
+    --      target = "target",
+    --      source = "RF",
+    --      duration = "duration",
+    --      loss = tonumber(loss) or 0,
+    --      ber = tonumber(ber) or 0,
+    --      rssi = rssi
+    --  }
+    -- )
+    return headlist
+end
+
+-- Last heard list
+local lh = {}
+
+local function table_clear(t)
+    for k in pairs(t) do
+        t[k] = nil
+    end
+end
+
+local function get_lastheard()
+    local calls = {}
+    local log_lines = get_mmdvm_log()
+    local headlist = get_hearlist(log_lines)
+    for i = 1, #lh, 1 do
+        table.insert(headlist, lh[i])
+    end
+    table_clear(lh)
+    for i = 1, #headlist, 1 do
+        if #lh >= 100 then
+            break
+        end
+        local key = headlist[i].callsign .. "@" .. headlist[i].mode
+        if calls[key] == nil then
+            calls[key] = true
+            table.insert(lh, headlist[i])
+        end
+    end
+    return lh
+end
+
+local function get_lh(req, msg)
+   local result = {}
+   result.lh = get_lastheard()
+   result.limit = 25
+   conn:reply(req, result)
+end
+
+local function get_callsign_by_uid(req, msg)
+   local result = {}
+   if msg.uid then
+        result.callsign = mmdvm.get_callsign_by_uid(msg.uid) or msg.uid
+   end
+   conn:reply(req, result)
+end
+
 
-local function get_dmrid_by_callsign(req, msg)
+local function get_user_by_uid(req, msg)
     local result = {}
 
-    if msg.callsign then
-        -- line = mmdvm.get_dmrid_by_callsign(msg.callsign)
-        -- if line then
-        --     local tokens = split(line, "\t")
-        --     local name = tokens[1]
-        --     local city = tokens[2]
-        --     local country = tokens[3]
-
-        --     result = {
-        --         callsign = msg.callsign,
-        --         name = name,
-        --         city = city,
-        --         country = country
-        --     }
-        -- else
-        --     result = {}
-		-- end
-		result = mmdvm.get_user_by_callsign(msg.callsign) or {}
-        result.callsign = msg.callsign
+    if msg.uid then
+        result = mmdvm.get_user_by_uid(msg.uid) or {}
     end
 
     conn:reply(req, result)
@@ -131,7 +374,9 @@ end
 
 local dmr_api = {
     dmrid = {
-        get_by_callsign = { get_dmrid_by_callsign, {} },
+        get_callsign_by_uid = { get_callsign_by_uid, {} },
+        get_user_by_uid = { get_user_by_uid, {} },
+        get_lastheard = { get_lh, {} },
     }
 }
 
@@ -148,4 +393,4 @@ conn:add(dmr_api)
 
 -- conn:listen(my_event)
 
-uloop.run()
\ No newline at end of file
+uloop.run()
diff --git a/mmdvm-luci/luci-theme-bootstrap-mmdvm/luasrc/view/themes/bootstrap-mmdvm/footer.htm b/mmdvm-luci/luci-theme-bootstrap-mmdvm/luasrc/view/themes/bootstrap-mmdvm/footer.htm
index b9e343a..d0afa6c 100644
--- a/mmdvm-luci/luci-theme-bootstrap-mmdvm/luasrc/view/themes/bootstrap-mmdvm/footer.htm
+++ b/mmdvm-luci/luci-theme-bootstrap-mmdvm/luasrc/view/themes/bootstrap-mmdvm/footer.htm
@@ -9,7 +9,7 @@
 <% local ver = require "luci.version" %>
 
    <footer>
-    <a href="https://github.com/lazywalker/mmdvm-openwrt">Powered by OSTAR</a>, BD7MQB/ <%= ver.distversion %>
+    <a href="https://hose.brandmeister.network">Powered by OSTAR</a>, Fndsz, / <%= ver.distversion %>
     <ul class="breadcrumb pull-right" id="modemenu" style="display:none"></ul>
    </footer>
   </div>
